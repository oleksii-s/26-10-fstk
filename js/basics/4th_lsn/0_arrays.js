/**
 * Массивы – суть, декларация. Ассоциативные, многомерные. Length.
 * Методы join, concat, reverse, slice, splice, sort, pop, push, shift
 */

Объявление

Пустой массив
var arr = [];
Массив fruits с тремя элементами:
var fruits = ["Яблоко", "Апельсин", "Слива"];


alert( fruits[0] ); // Яблоко
alert( fruits[1] ); // Апельсин
alert( fruits[2] ); // Слива

заменить
fruits[2] = 'Груша'; // теперь ["Яблоко", "Апельсин", "Груша"]

добавить
fruits[3] = 'Лимон'; // теперь ["Яблоко", "Апельсин", "Груша", "Лимон"]

свойстве length (Общее число элементов)
alert( fruits.length ); // 3

любое число элементов любого типа
arr = [ 1, 'Имя', { name: 'Петя' }, true ];

// получить объект из массива и тут же -- его свойство
alert( arr[2].name ); // Петя

/* ============================================================ */

Структуры данных массивов
очередь (очередь сообщений)
стек (стопка документов)

чтобы реализовывать эти структуры данных, существуют специальные методы.
  Конец массива

pop
alert( fruits.pop() ); // удалили "Лимон"

alert( fruits ); // Яблоко, Апельсин, Груша

push
fruits.push("Банан");

alert( fruits ); // Яблоко, Апельсин, Груша, Банан

// fruits.push(...) равнозначен fruits[fruits.length] = ...

Начало массива

shift
alert( fruits.shift() ); // удалили Яблоко

alert( fruits ); // Апельсин, Груша, Банан

unshift
fruits.unshift('Яблоко');

alert( fruits ); // Яблоко, Апельсин, Груша, Банан

push и unshift могут добавлять сразу по несколько элементов
fruits.push("Дыня", "Персик");
fruits.unshift("Ананас", "Лимон");
// результат: fruits = ["Ананас", "Лимон", "Яблоко", "Апельсин", "Груша", "Банан", "Дыня", "Персик"]

/* ============================================================ */

Внутреннее устройство массива
Массив – это объект, где в качестве ключей выбраны цифры,
  с дополнительными методами и свойством length.

Так как это объект, то:
- в функцию он передаётся по ссылке
function eat(arr) {
  arr.pop();
}

alert( arr.length ); // 4
eat(arr);
eat(arr);
alert( arr.length ); // 2, в функцию массив не скопирован, а передана ссылка

-можно присваивать в массив любые свойства
fruits[99999] = 5; // присвоить свойство с любым индексом
fruits.age = 25; // назначить свойство со строковым именем

!!!!!!! НО массивы для того и придуманы в JavaScript,
  чтобы удобно работать именно с упорядоченными, нумерованными данными.
  Для этого в них существуют специальные методы и свойство length.


Вывод массива с «дырами»
var a = [];
a[0] = 0;
a[5] = 5;

alert( a ); // 0,,,,,5

быстродействие
Методы push/pop выполняются быстро, а shift/unshift – медленно.

/* ============================================================ */

Перебор элементов
for (var i = 0; i < arr.length; i++) {
  alert( arr[i] );
}

!!!! Не используйте for..in для массивов
Так как массив является объектом, то возможен и вариант for..in
Недостатки этого способа:

- Цикл for..in выведет все свойства объекта, а не только цифровые.
- Цикл for (var i=0; i<arr.length; i++) в современных браузерах выполняется в 10-100 раз быстрее

/* ============================================================ */

Особенности работы length
var first_arr = [];

1. length – не количество элементов массива, а последний индекс + 1.
first_arr[1000] = true;
alert(first_arr.length); // 1001
>>> если у вас элементы массива нумеруются случайно или с
большими пропусками, то стоит подумать о том, чтобы использовать обычный объект.

2. При уменьшении length массив укорачивается.
var second_arr = [1, 2, 3, 4, 5];

second_arr.length = 2; // укоротить до 2 элементов
alert( second_arr ); // [1, 2]

second_arr.length = 5; // вернуть length обратно, как было
alert( second_arr[3] ); // undefined: значения не вернулись
>>> Самый простой способ очистить массив – это arr.length=0.

/* ============================================================ */

Создание вызовом new Array
var arr_using_constructor = new Array("Яблоко", "Груша", "и т.п.");

>>> особенность - если у него один аргумент-число new Array(число), то он создает массив без элементов, но с заданной длиной.
var third_arr = new Array(2, 3);
alert( third_arr[0] ); // 2, создан массив [2, 3], всё ок

foth_arr = new Array(2); // создаст массив [2] ?
alert( foth_arr[0] ); // undefined! у нас массив без элементов, длины 2 ([,])

/* ============================================================ */

Многомерные массивы
var matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];


